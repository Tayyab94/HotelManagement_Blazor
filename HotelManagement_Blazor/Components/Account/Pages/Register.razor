@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using HotelManagement_Blazor.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>


<div class="row d-flex justify-content-center">
    <h1 class="text-center">Register</h1>

    <div class="col-md-8">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" Enhance>
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            @*          <ValidationSummary class="text-danger" role="alert" /> *@

            <div class="row">
                <div class="col-sm-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="username" aria-required="true" placeholder="First Name" />
                        <label for="FirstName">First Name</label>
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="username" aria-required="true" placeholder="Last Name" />
                        <label for="FirstName">Last Name</label>
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                </div>

            </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.ContactNumber" class="form-control" autocomplete="username" aria-required="true" placeholder="Contact Number" />
                        <label for="ContactNumber">Contact Number</label>
                        <ValidationMessage For="() => Input.ContactNumber" class="text-danger" />
                    </div>
              
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                @if (emailExist)
                {
                    <p class="text-danger">This email is already registered.</p>
                }
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="password">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="confirm-password">Confirm Password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                
            <div>

                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </div>
            <div class="mt-3">
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already have an Account?</a>
                </p>
            </div>
        </EditForm>
    </div>
    @*  <div class="col-md-6 col-md-offset-2">
    <section>
    <h3>Use another service to register.</h3>
    <hr />
    <ExternalLoginPicker />
    </section>
    </div> *@
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private bool emailExist = false;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var userExist = await UserManager.FindByEmailAsync(Input.Email);
        if(userExist is not null)
        {
            emailExist = true;
            return;
        }
        var user = CreateUser();
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.ContactNumber = Input.ContactNumber;
        user.Designation = RoleTypeEnum.Guest.ToString();
        user.RoleName = RoleTypeEnum.Guest.ToString();
        user.EmailConfirmed = true;
       
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        result = await UserManager.AddToRoleAsync(user, RoleTypeEnum.Guest.ToString());

        if(!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        Logger.LogInformation("User created a new account with password.");

        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        // }

        // await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo("Account/login");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Display(Name = "First Name")]
        [Required, MaxLength(15)]
        public string FirstName { get; set; }

        [Display(Name = "Last Name")]
        [MaxLength(10), Unicode(false)]
        public string? LastName { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Contact Number")]
        public string ContactNumber { get; set; }
    }
}
